/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10' // only for tests
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.diffplug.spotless' version '6.1.2'
    id 'distribution'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

dependencies {
    implementation 'org.glassfish:javax.json:1.1.4'
    implementation 'com.worksap.nlp:jdartsclone:1.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.openjdk.jmh:jmh-core:1.34'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.34'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.6.0'
}

group = 'com.worksap.nlp'
version = '0.6.0-SNAPSHOT'
description = 'Sudachi Japanese Morphological Analyzer'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 8
}

tasks.withType(Test) {
    systemProperty "file.encoding", "utf-8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "worksapplications"
        property "sonar.projectKey", "com.worksap.nlp.sudachi"
        property "sonar.language", "java"
        property "sonar.links.homepage", "https://github.com/WorksApplications/Sudachi"
        property "sonar.links.ci", "https://github.com/WorksApplications/Sudachi/actions"
        property "sonar.links.issue", "https://github.com/WorksApplications/Sudachi/issues"
    }
}

// See https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // triggers https://github.com/diffplug/spotless/issues/911
    // ratchetFrom 'origin/develop'
    encoding 'UTF-8' // all formats will be interpreted as UTF-8

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        eclipse('4.21.0').configFile('.formatter/eclipse-formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt('0.30')
        licenseHeaderFile('.formatter/license-header')
    }
}

jar {
    manifest {
        attributes "Main-Class": 'com.worksap.nlp.sudachi.SudachiCommandLine'
        attributes "Class-Path": configurations.runtimeClasspath.collect { it.name }.join(" ")
    }
}

distributions {
    executable {
        contents {
            from jar
            from configurations.runtimeClasspath
            from fileTree('.') {
                include "README*"
                include "LICENSE*"
                include "licenses/*"
            }
            from fileTree("src/main/resources") {
                include "sudachi.json"
                include "sudachi_fulldict.json"
            }
            into "/"
        }
    }
}
